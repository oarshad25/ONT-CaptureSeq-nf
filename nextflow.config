/*
Set default parameters

Any parameters provided by the user with a -params-file or
with -- command-line arguments will override the values
defined below.
*/
params {
    // print help
    help = false

    /*
    Mandatory options
    =================
    */

    // *input options*
    // must specify one of inputdir or samplesheet
    // path to demultiplexed read directory
    inputdir = null
    // path to sample manifest in CSV format
    samplesheet = null

    // *references*
    // path to reference genome in fasta format
    genome = null
    // path to genome annotation in GTF format
    annotation = null

    /*
    Additional options
    =================
    */
    // *output directory*
    outdir = "results"

    // threshold for minimum number of reads that sample must contain
    // samples with number of reads below this threshold are discarded
    // this is mainly to get rid of unassigned barcodes
    min_reads_per_sample = 1000
}

/*
Pipeline metadata
*/

manifest {
    name = 'ONT-CaptureSeq-nf'
    contributors = [[name: 'Osama Arshad', affiliation: 'University of Oxford', contribution: 'author']]
    homePage = 'https://github.com/oarshad25/ONT-CaptureSeq-nf'
    description = 'analysis of multiplexed long-read nanopore targeted RNA capture sequencing'
    mainScript = 'main.nf'
    license = 'GPLv3'
    //TODO: set nextflow minimum version
    nextflowVersion = ''
    //TODO: Add pipeline version number
    version = ''
}

/*
Configuration profiles

Define profiles for different execution platforms
*/

profiles {
    laptop {
        process.executor = 'local'
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }

    bmrc {
        params {
            config_profile_description = 'BMRC profile'
        }

        apptainer {
            enabled = true
            autoMounts = true
            // TODO: Create Apptainer cache directory and add path
            cacheDir = ''
        }

        executor {
            name = 'slurm'
        }

        process {
            // TODO: Configure default process resources
            // default process resources
            queue = 'short'
            cpus = 2
            memory = '16GB'
            time = '8h'

            /*
            TODO: Set up process configuration based on labels
            */

            //TODO: Change to use task.attempt and
            // check_max as done here:
            // https://github.com/Sydney-Informatics-Hub/nf-core-demo/blob/master/conf/base.config
            // withLabel: local {
            //     executor = 'local'
            // }
            // withLabel: single {
            //     cpus = 1
            //     memory = 6.GB
            //     time = 4.h
            // }
            // withLabel: low {
            //     cpus = 2
            //     memory = 12.GB
            //     time = 4.h
            // }
            // withLabel: medium {
            //     cpus = 6
            //     memory = 36.GB
            //     time = 8.h
            // }
            // withLabel: high {
            //     cpus = 12
            //     memory = 72.GB
            //     time = 16.h
            // }
            // withLabel: process_long {
            //     cpus = 8
            //     memory = 64.GB
            //     time = 2.d
            //     queue = 'long'
            // }
            // withLabel: largemem {
            //     cpus = 8
            //     memory = 128.GB
            //     time = 16.h
            // }

            /*
            TODO: Specify path to containers.
            Configure software requirements for each process by name
            by specifying path to container
            and optionally process specific resources (e.g. cpus, time, memory)
            */

            // withName: FOO {
            //     cpus = 4
            //     time = '1d'
            //     memory = '64GB'
            //     container = "path/to/container"
            // }

            // for shared file systems like BMRC cluster
            cache = 'lenient'
        }
    }

    local {
        process.executor = 'local'
    }
}
